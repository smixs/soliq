import streamlit as st
import requests
from bs4 import BeautifulSoup
import pandas as pd
import re
from urllib.parse import parse_qs, urlparse
from io import BytesIO

def get_check_number(url):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä —á–µ–∫–∞ –∏–∑ URL
    """
    parsed_url = urlparse(url)
    params = parse_qs(parsed_url.query)
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á–µ–∫–∞
    check_parts = []
    if 't' in params:
        check_parts.append(params['t'][0])
    if 'r' in params:
        check_parts.append(params['r'][0])
    if 'c' in params:
        check_parts.append(params['c'][0])
    
    # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ
    if check_parts:
        return '_'.join(check_parts)
    return 'receipt'

def fetch_receipt_data(url):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –ø–æ URL
    """
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Cache-Control': 'max-age=0'
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        response.raise_for_status()
        return response.text
    except requests.Timeout:
        st.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return None
    except requests.ConnectionError:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return None
    except requests.HTTPError as e:
        if e.response.status_code == 404:
            st.error("–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.")
        else:
            st.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e.response.status_code}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return None
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None

def parse_receipt_html(html_content):
    """
    –ü–∞—Ä—Å–∏—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
    """
    if not html_content:
        return None
    
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    items_data = []
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    product_rows = soup.find_all('tr', class_='products-row')
    
    for row in product_rows:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ td —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ
        cells = row.find_all('td')
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        item_data = {
            'Nomi': cells[0].text.strip(),
            'Soni': cells[1].text.strip(),
            'Narxi': cells[2].text.strip().replace(',', ''),  # –£–¥–∞–ª—è–µ–º –∑–∞–ø—è—Ç—ã–µ –∏–∑ —á–∏—Å–µ–ª
            'Chegirma': '',
            'Shtrix kodi': '',
            'MXIK-kod': '',
            'MXIK nomi': '',
            'Markirovka kodi': ''
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ products-row
        next_element = row.find_next_sibling('tr')
        while next_element and 'products-row' not in next_element.get('class', []):
            if 'code-row' in next_element.get('class', []):
                label_cell = next_element.find('td')
                value_cell = next_element.find_all('td')[-1]
                
                if label_cell and value_cell:
                    label = label_cell.text.strip()
                    value = value_cell.text.strip()
                    
                    if 'Chegirma' in label:
                        item_data['Chegirma'] = value
                    elif 'Shtrix kodi' in label:
                        # –û—á–∏—â–∞–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥ –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
                        cleaned_value = ''.join(filter(str.isdigit, value))
                        item_data['Shtrix kodi'] = cleaned_value
                    elif 'MXIK kodi' in label:
                        # –û—á–∏—â–∞–µ–º MXIK-–∫–æ–¥ –æ—Ç –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
                        cleaned_value = ''.join(filter(str.isdigit, value))
                        item_data['MXIK-kod'] = cleaned_value
                    elif 'MXIK nomi' in label:
                        item_data['MXIK nomi'] = value
                    elif 'Markirovka kodi' in label:
                        item_data['Markirovka kodi'] = value
            
            next_element = next_element.find_next_sibling('tr')
        
        items_data.append(item_data)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(items_data)
    
    # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    for col in df.columns:
        df[col] = df[col].str.strip()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
    df['Soni'] = pd.to_numeric(df['Soni'], errors='coerce')
    df['Narxi'] = pd.to_numeric(df['Narxi'], errors='coerce')
    df['Shtrix kodi'] = pd.to_numeric(df['Shtrix kodi'], errors='coerce')
    df['MXIK-kod'] = pd.to_numeric(df['MXIK-kod'], errors='coerce')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    df['Narxi'] = df['Narxi'].round(2)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    
    return df

def main():
    st.set_page_config(
        page_title="Soliq Checkmate",
        page_icon="üßæ",
        layout="wide",
        initial_sidebar_state="collapsed"
    )
    
    st.title("üßæ Soliq Checkmate")
    st.markdown("<p style='font-size: 8px; margin-top: -15px;'>made with ü©µ by <a href='https://tdigroup.uz'>tdigroup.uz</a></p>", unsafe_allow_html=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    st.markdown("""
    ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    1. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–Ω–ª–∞–π–Ω —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫
    2. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª
    3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    4. –°–∫–∞—á–∞–π—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel
    """)
    
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL
    receipt_url = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ URL —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞:",
        placeholder="https://ofd.soliq.uz/check?t=..."
    )
    
    if st.button("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
        if not receipt_url:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL —á–µ–∫–∞")
            return
            
        if not receipt_url.startswith("https://ofd.soliq.uz/check"):
            st.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'https://ofd.soliq.uz/check'")
            return
            
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            html_content = fetch_receipt_data(receipt_url)
            
            if html_content:
                df = parse_receipt_html(html_content)
                
                if df is not None and not df.empty:
                    st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")
                    
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                    st.dataframe(
                        df,
                        hide_index=True,
                        use_container_width=True
                    )
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —á–µ–∫–∞ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                    check_number = get_check_number(receipt_url)
                    
                    # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
                    output = BytesIO()
                    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                        df.to_excel(writer, index=False, sheet_name='–ß–µ–∫')
                        workbook = writer.book
                        worksheet = writer.sheets['–ß–µ–∫']
                        
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
                        for i, col in enumerate(df.columns):
                            max_length = max(
                                df[col].astype(str).apply(len).max(),
                                len(col)
                            ) + 2
                            worksheet.set_column(i, i, max_length)
                    
                    output.seek(0)
                    
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å Excel",
                        data=output,
                        file_name=f"check_{check_number}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —á–µ–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏.")

if __name__ == "__main__":
    main() 