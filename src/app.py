import streamlit as st
import requests
from bs4 import BeautifulSoup
import pandas as pd
import re

def fetch_receipt_data(url):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –ø–æ URL
    """
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.text
    except requests.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def parse_receipt_html(html_content):
    """
    –ü–∞—Ä—Å–∏—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞
    """
    if not html_content:
        return None
    
    soup = BeautifulSoup(html_content, 'html.parser')
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    items_data = []
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏
    product_rows = soup.find_all('tr', class_='products-row')
    
    for row in product_rows:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ td —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫–µ
        cells = row.find_all('td')
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
        item_data = {
            'Nomi': cells[0].text.strip(),
            'Soni': cells[1].text.strip(),
            'Narxi': cells[2].text.strip(),
            'Chegirma': '',
            'Shtrix kodi': '',
            'MXIK-kod': '',
            'MXIK nomi': '',
            'Markirovka kodi': ''
        }
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ products-row
        next_element = row.find_next_sibling('tr')
        while next_element and 'products-row' not in next_element.get('class', []):
            if 'code-row' in next_element.get('class', []):
                label_cell = next_element.find('td')
                value_cell = next_element.find_all('td')[-1]
                
                if label_cell and value_cell:
                    label = label_cell.text.strip()
                    value = value_cell.text.strip()
                    
                    if 'Chegirma' in label:
                        item_data['Chegirma'] = value
                    elif 'Shtrix kodi' in label:
                        item_data['Shtrix kodi'] = value
                    elif 'MXIK kodi' in label:
                        item_data['MXIK-kod'] = value
                    elif 'MXIK nomi' in label:
                        item_data['MXIK nomi'] = value
                    elif 'Markirovka kodi' in label:
                        item_data['Markirovka kodi'] = value
            
            next_element = next_element.find_next_sibling('tr')
        
        items_data.append(item_data)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(items_data)
    
    # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
    for col in df.columns:
        df[col] = df[col].str.strip()
    
    return df

def main():
    st.title("üßæ Soliq Checkmate")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    st.markdown("""
    –ü—Ä–æ—Å—Ç–æ–µ –∏ —É–¥–æ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö —á–µ–∫–æ –ø–æ URL.
    
    ### –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
    1. –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–Ω–ª–∞–π–Ω —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞.
    2. –ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª.
    3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Å–∫–∞—á–∞–π—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV.
    4. –û—Ç–∫—Ä–æ–π—Ç–µ Excel, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É ¬´–î–∞–Ω–Ω—ã–µ¬ª, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ¬ª ‚Üí ¬´–ò–∑ —Ñ–∞–π–ª–∞¬ª ‚Üí ¬´–ò–∑ —Ç–µ–∫—Å—Ç–∞ (CSV)¬ª.
    5. –£–∫–∞–∂–∏—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª ‚Äî –∏ —Ç–∞–±–ª–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞!
    
    *Solic Checkmate —ç–∫–æ–Ω–æ–º–∏—Ç –≤–∞—à–µ –≤—Ä–µ–º—è –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–µ —á–µ–∫–∏ –≤ —É–¥–æ–±–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤.*
    """)
    
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL
    receipt_url = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL —Ñ–∏—Å–∫–∞–ª—å–Ω–æ–≥–æ —á–µ–∫–∞:", 
                               placeholder="https://ofd.soliq.uz/check?t=...")
    
    if st.button("–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        if receipt_url:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
                # –ü–æ–ª—É—á–∞–µ–º HTML-–∫–æ–Ω—Ç–µ–Ω—Ç
                html_content = fetch_receipt_data(receipt_url)
                
                if html_content:
                    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
                    df = parse_receipt_html(html_content)
                    
                    if df is not None and not df.empty:
                        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã!")
                        
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                        st.dataframe(df)
                        
                        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV
                        csv = df.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
                            data=csv,
                            file_name="receipt_data.csv",
                            mime="text/csv"
                        )
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —á–µ–∫–µ")
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL —á–µ–∫–∞")

if __name__ == "__main__":
    main() 